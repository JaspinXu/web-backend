<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="redlib.backend.dao.SemesterMapper">
  <resultMap id="BaseResultMap" type="redlib.backend.model.Semester">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="semester_name" jdbcType="VARCHAR" property="semesterName" />
    <result column="created_at" jdbcType="TIMESTAMP" property="createdAt" />
    <result column="updated_at" jdbcType="TIMESTAMP" property="updatedAt" />
  </resultMap>

  <sql id="Base_Column_List">
    id, semester_name, created_at, updated_at
  </sql>

  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from semester
    where id = #{id,jdbcType=INTEGER}
  </select>

  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from semester
    where id = #{id,jdbcType=INTEGER}
  </delete>

  <insert id="insert" parameterType="redlib.backend.model.Semester">
    insert into semester (id, semester_name, created_at, 
      updated_at)
    values (#{id,jdbcType=INTEGER}, #{semesterName,jdbcType=VARCHAR}, #{createdAt,jdbcType=TIMESTAMP}, 
      #{updatedAt,jdbcType=TIMESTAMP})
  </insert>

  <insert id="insertSelective" parameterType="redlib.backend.model.Semester">
    insert into semester
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="semesterName != null">
        semester_name,
      </if>
      <if test="createdAt != null">
        created_at,
      </if>
      <if test="updatedAt != null">
        updated_at,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="semesterName != null">
        #{semesterName,jdbcType=VARCHAR},
      </if>
      <if test="createdAt != null">
        #{createdAt,jdbcType=TIMESTAMP},
      </if>
      <if test="updatedAt != null">
        #{updatedAt,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>

  <update id="updateByPrimaryKeySelective" parameterType="redlib.backend.model.Semester">
    update semester
    <set>
      <if test="semesterName != null">
        semester_name = #{semesterName,jdbcType=VARCHAR},
      </if>
      <if test="createdAt != null">
        created_at = #{createdAt,jdbcType=TIMESTAMP},
      </if>
      <if test="updatedAt != null">
        updated_at = #{updatedAt,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>

  <update id="updateByPrimaryKey" parameterType="redlib.backend.model.Semester">
    update semester
    set semester_name = #{semesterName,jdbcType=VARCHAR},
      created_at = #{createdAt,jdbcType=TIMESTAMP},
      updated_at = #{updatedAt,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>

  <!--查询（分页）-->
  <select id="list" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List"/>
    from semester
    <where>
      <if test="queryDTO.semesterName != null">
        and semester_name like #{queryDTO.semesterName}
      </if>
      <if test="queryDTO.createdAt != null">
        and date(created_at)=date(#{queryDTO.createdAt})
      </if>
      <if test="queryDTO.updatedAt != null">
        and date(updated_at)=date(#{queryDTO.updatedAt})
      </if>
    </where>
    <if test="queryDTO.orderBy != null">
      order by ${queryDTO.orderBy}
    </if>
    <if test="queryDTO.orderBy == null">
      order by id desc
    </if>
    limit #{offset}, #{limit}
  </select>

  <!--查询学期列表（分页）命中个数-->
  <select id="count" resultType="integer">
    select count(*) from semester
    <where>
      <if test="queryDTO.semesterName != null">
        and semester_name like #{queryDTO.semesterName}
      </if>
      <if test="queryDTO.createdAt != null">
        and date(created_at)=date(#{queryDTO.createdAt})
      </if>
      <if test="queryDTO.updatedAt != null">
        and date(updated_at)=date(#{queryDTO.updatedAt})
      </if>
    </where>
  </select>

</mapper>